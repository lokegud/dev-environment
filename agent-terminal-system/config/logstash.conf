input {
  # File input for reading log files
  file {
    path => "/var/log/agent-terminal/*.log"
    start_position => "beginning"
    type => "terminal-log"
    codec => "plain"
    tags => ["terminal", "plaintext"]
  }
  
  file {
    path => "/var/log/agent-terminal/*.jsonl"
    start_position => "beginning"
    type => "terminal-structured"
    codec => "json_lines"
    tags => ["terminal", "structured"]
  }
  
  # HTTP input for real-time log streaming
  http {
    port => 5000
    type => "terminal-stream"
    tags => ["terminal", "stream"]
  }
  
  # UDP input for high-throughput logs
  udp {
    port => 5001
    type => "terminal-udp"
    tags => ["terminal", "udp"]
  }
}

filter {
  # Parse agent ID from file path
  if [path] {
    grok {
      match => { "path" => "/var/log/agent-terminal/%{DATA:agent_id}-.*.log" }
    }
  }
  
  # Parse timestamp for plaintext logs
  if "plaintext" in [tags] {
    grok {
      match => { 
        "message" => "^%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:agent_id}\] %{GREEDYDATA:command}"
      }
    }
    
    if [timestamp] {
      date {
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
        target => "@timestamp"
      }
    }
  }
  
  # Add metadata
  mutate {
    add_field => {
      "[@metadata][index]" => "agent-terminal-logs-%{+yyyy.MM}"
      "log_source" => "agent-terminal-system"
      "processed_at" => "%{@timestamp}"
    }
  }
  
  # Parse terminal session recordings
  if [path] =~ /\.cast$/ {
    mutate {
      add_field => { "log_type" => "recording" }
    }
  }
  
  # Enrich with agent information
  if [agent_id] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "agent-profiles"
      query => "agent_id:%{agent_id}"
      fields => {
        "agent_name" => "agent_name"
        "team" => "team"
        "role" => "role"
      }
    }
  }
  
  # Security: Remove sensitive information
  mutate {
    gsub => [
      "message", "(password|passwd|pwd|secret|key|token)[\s=:]+[^\s]+", "[REDACTED]",
      "command", "(password|passwd|pwd|secret|key|token)[\s=:]+[^\s]+", "[REDACTED]"
    ]
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][index]}"
    template_name => "agent-terminal-logs"
    template => "/usr/share/logstash/templates/agent-terminal-template.json"
    template_overwrite => true
  }
  
  # Debug output (remove in production)
  if [@metadata][debug] {
    stdout {
      codec => rubydebug
    }
  }
  
  # Output critical errors to file
  if [level] == "ERROR" or [log_level] == "error" {
    file {
      path => "/var/log/logstash/critical-errors.log"
      codec => json_lines
    }
  }
}